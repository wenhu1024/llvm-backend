--- |
  ; ModuleID = 'input.ll'
  source_filename = "input.ll"
  target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128-Fn32"
  target triple = "arm64-apple-macosx14.0.0"
  
  define i32 @_Z3fooPxx(ptr nocapture noundef readonly %arg, i64 noundef %arg1) local_unnamed_addr {
  bb:
    %i = icmp slt i64 %arg1, 0
    br i1 %i, label %bb2, label %bb4
  
  bb2:                                              ; preds = %bb
    %i3 = tail call i64 @_Z3barx(i64 noundef %arg1)
    br label %bb4
  
  bb4:                                              ; preds = %bb2, %bb
    %i5 = phi i64 [ %i3, %bb2 ], [ %arg1, %bb ]
    %i6 = add nsw i64 %i5, 18
    %i7 = getelementptr inbounds i64, ptr %arg, i64 %i6
    %i8 = load i64, ptr %i7, align 8
    %i9 = add nsw i64 %i8, %i5
    %i10 = trunc i64 %i9 to i32
    ret i32 %i10
  }
  
  declare i64 @_Z3barx(i64 noundef) local_unnamed_addr

...
---
name:            _Z3fooPxx
alignment:       4
tracksRegLiveness: true
registers:
  - { id: 0, class: gpr64all }
  - { id: 1, class: gpr64 }
  - { id: 2, class: gpr64 }
  - { id: 3, class: gpr64 }
  - { id: 4, class: gpr64all }
  - { id: 5, class: gpr64common }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
liveins:
  - { reg: '$x0', virtual-reg: '%2' }
  - { reg: '$x1', virtual-reg: '%3' }
frameInfo:
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.bb:
    successors: %bb.1(0x30000000), %bb.2(0x50000000)
    liveins: $x0, $x1
  
    %3:gpr64 = COPY $x1
    %2:gpr64 = COPY $x0
    TBZX %3, 63, %bb.2
    B %bb.1
  
  bb.1.bb2:
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    $x0 = COPY %3
    BL @_Z3barx, csr_darwin_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit $x0, implicit-def $sp, implicit-def $x0
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
    %4:gpr64all = COPY $x0
    %0:gpr64all = COPY %4
  
  bb.2.bb4:
    %1:gpr64 = PHI %3, %bb.0, %0, %bb.1
    %5:gpr64common = ADDXrs %2, %1, 3
    %6:gpr32 = LDRWui killed %5, 36 :: (load (s32) from %ir.i7, align 8)
    %7:gpr32 = COPY %1.sub_32
    $w0 = ADDWrr %6, %7
    RET_ReallyLR implicit $w0

...
